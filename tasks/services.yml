---

- name: "Checking if configuration for '{{ service }}' exist"
  stat:
    path: "{{ docker_compose_run_local_services_dir }}/{{ service }}"
  register: stat_common_service_result
  delegate_to: 127.0.0.1
  become: no

- name: Exit if service not found
  fail:
    msg: Servise does not exits
  when: stat_common_service_result.stat.exists == false

# Список директорий используется для создания таких же директорий на целевом хосте
- name: Get directory list for service '{{ service }}'
  find:
    path: "{{ docker_compose_run_local_services_dir }}/{{ service }}"
    file_type: directory
    hidden: yes
    recurse: yes
  register: find_list_local_dirs
  delegate_to: 127.0.0.1
  become: no

# Список файлов используется для копирования на целевой хост с помощью модуля template
- name: Get files list for service '{{ service }}'
  find:
    path: "{{ docker_compose_run_local_services_dir }}/{{ service }}"
    file_type: file
    hidden: yes
    recurse: yes
  register: find_list_local_files
  delegate_to: 127.0.0.1
  become: no

# Если переменная 'docker_compose_run_local_services_dir' задана с начальными './', то удаляем их.
- set_fact:
    local_services_dir_trimmed: "{{ docker_compose_run_local_services_dir | regex_replace('^./', '') }}"

- name: Create directories for service '{{ service }}'
  file:
    path: "{{ docker_compose_run_remote_services_dir }}/{{ item.path | replace( local_services_dir_trimmed + '/' , '') }}"
    state: directory
  loop: "{{ find_list_local_dirs.files }}"

- name: "Copy template Jinja2 configuration for '{{ service }}' service"
  template:
    src: "{{ item.path }}"
    dest: "{{ docker_compose_run_remote_services_dir }}/{{ item.path | replace( local_services_dir_trimmed + '/', '') }}"
    owner: "root"
    mode: "preserve"
  loop: "{{ find_list_local_files.files }}"


- name: Only pull images for {{ service }}
  shell: |
    cd "{{ docker_compose_run_remote_services_dir }}/{{ service }}"
    docker-compose pull
  when: docker_compose_run_only_pull_images|bool == true

- name: Run service '{{ service }}'
  docker_compose:
    project_src: "{{ docker_compose_run_remote_services_dir }}/{{ service }}"
    state: "{{ docker_compose_state }}"
    restarted: "{{ docker_compose_restarted }}"
    scale: "{{ docker_compose_service_scale }}"
    pull: "{{ docker_compose_pull }}"
  when: docker_compose_run_only_pull_images|bool != true
